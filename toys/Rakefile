simulated_datasets = {
  'fixed_width_3' => {
    'script' => 'toy/fixed_width_3.lua',
  },
  'variable_width_2-4' => {
    'script' => 'toy/variable_width_2-4.lua',
  },
  'variable_width_2-4-200k' => {
    'script' => 'toy/variable_width_2-4.lua',
  },
}

simulated_dataset_outputs = []
simulated_datasets.each do |label,info|
  output = "toy/#{label}.t7"
  simulated_dataset_outputs.push output
  bash_script = "toy/#{label}.sh"
  lua_script = info['script']
  file output => [bash_script, lua_script, 'toy/toy.lua'] do
    Dir.chdir 'toy' do
      sh "../#{bash_script}"
    end
  end
end

toy_figures = %w(
  figure_1.pdf
  figure_2.pdf
  figure_3.pdf
  figure_4a.pdf
  figure_4b.pdf
  figure_4c.pdf).collect{|f| "toy/#{f}"}

toy_figures.each do |f|
  file f => %w(toy/visualize.R) do
    Rake::Task['toy:png'].invoke
  end
end

trained_models = %w(mlp/trained_model-1_layer.t7)

task :toy => toy_figures

namespace :toy do
  simulated_datasets.each do |label,info|
    t7 = "toy/#{label}.t7"
    desc "Simulate #{label} dataset"
    task label => [t7]
  end

  desc "Generate plots visualizing toy model"
  task :png do
    Dir.chdir 'toy' do
      sh "R --vanilla < visualize.R"
      sh "../scripts/png_figures.sh"
    end
  end
end

%w(mlp/trained_model-1_layer.t7 mlp/grid_predictions-1_layer.csv).each do |f|
  file f => %w(mlp/model-1_layer.sh mlp/model-1_layer.lua toy/fixed_width_3.t7) do
    Rake::Task['mlp:one_layer:train'].invoke
  end
end

%w(mlp/trained_model-1_layer-fail.t7 mlp/grid_predictions-1_layer-fail.csv).each do |f|
  file f => %w(mlp/model-1_layer-fail.sh mlp/model-1_layer.lua toy/fixed_width_3.t7) do
    Rake::Task['mlp:one_layer_fail:train'].invoke
  end
end

%w(mlp/trained_model-2_layer.t7 mlp/grid_predictions-2_layer.csv).each do |f|
  file f => %w(mlp/model-2_layer.sh mlp/model-2_layer.lua toy/fixed_width_3.t7) do
    Rake::Task['mlp:two_layer:train'].invoke
  end
end

mlp_figures = %w(mlp/model-1_layer.pdf mlp/model-2_layer.pdf mlp/model-1_layer-fail.pdf)

file 'mlp/model-1_layer.pdf' => %w(mlp/grid_predictions-1_layer.csv toy/plot_predictions.R) do
  Rake::Task['mlp:one_layer:visualize'].invoke
  Rake::Task['mlp:png'].invoke
end

file 'mlp/model-1_layer-fail.pdf' =>
    %w(mlp/grid_predictions-1_layer-fail.csv toy/plot_predictions.R) do
  Rake::Task['mlp:one_layer_fail:visualize'].invoke
  Rake::Task['mlp:png'].invoke
end

file 'mlp/model-2_layer.pdf' => %w(mlp/grid_predictions-2_layer.csv toy/plot_predictions.R) do
  Rake::Task['mlp:two_layer:visualize'].invoke
  Rake::Task['mlp:png'].invoke
end

task :mlp => mlp_figures + ['mlp:png']

namespace :mlp do
  namespace "one_layer" do
    desc "Train a 1-layer model"
    task :train do
      Dir.chdir "mlp" do
        sh "./model-1_layer.sh"
      end
    end

    desc "Visualize how well it did"
    task :visualize do
      Dir.chdir "mlp" do
        pred_file = "grid_predictions-1_layer.csv"
        sh "R --vanilla --args #{pred_file} model-1_layer.pdf < ../toy/plot_predictions.R"
      end
    end
  end

  namespace "one_layer_fail" do
    desc "Train a 1-layer model to show how it can fail"
    task :train do
      Dir.chdir "mlp" do
        sh "./model-1_layer-fail.sh"
      end
    end

    desc "Visualize how well it did"
    task :visualize do
      Dir.chdir "mlp" do
        in_fn = 'grid_predictions-1_layer-fail.csv'
        out_fn = 'model-1_layer-fail.pdf'
        sh "R --vanilla --args #{in_fn} #{out_fn} < ../toy/plot_predictions.R"
      end
    end
  end

  namespace "two_layer" do
    desc "Train a 2-layer model"
    task :train do
      Dir.chdir "mlp" do
        sh "./model-2_layer.sh"
      end
    end

    desc "Visualize how well it did"
    task :visualize do
      Dir.chdir "mlp" do
        in_fn = "grid_predictions-2_layer.csv"
        sh "R --vanilla --args #{in_fn} model-2_layer.pdf < ../toy/plot_predictions.R"
      end
    end
  end

  task :png do
    Dir.chdir 'mlp' do
      sh "../scripts/png_figures.sh"
    end
  end
end

%w(rnn/trained_model-1_layer.t7 rnn/grid_predictions-1_layer.csv).each do |f|
  file f => %w(rnn/model-1_layer.sh rnn/model-1_layer.lua toy/fixed_width_3.t7) do
    Rake::Task['rnn:one_layer:train'].invoke
  end
end

rnn_figures = %w(rnn/model-1_layer.pdf)

file 'rnn/model-1_layer.pdf' => %w(rnn/grid_predictions-1_layer.csv toy/plot_predictions.R) do
  Rake::Task['rnn:one_layer:visualize'].invoke
  Rake::Task['rnn:png'].invoke
end

namespace :rnn do
  namespace "one_layer" do
    desc "Train a 1-layer model"
    task :train do
      Dir.chdir "rnn" do
        sh "./model-1_layer.sh"
      end
    end

    desc "Visualize how well it did"
    task :visualize do
      Dir.chdir "rnn" do
        pred_file = "grid_predictions-1_layer.csv"
        sh "R --vanilla --args #{pred_file} model-1_layer.pdf < ../toy/plot_predictions.R"
      end
    end
  end

  task :png => rnn_figures do
    Dir.chdir 'rnn' do
      sh "../scripts/png_figures.sh"
    end
  end
end

task :rnn => ['rnn:png']

lstm_variations = {
  "1_layer" => {
    "data" => "fixed_width_3",
    "script" => "lstm/model-1_layer.lua",
  },
  "1_layer-variable" => {
    "data" => "variable_width_2-4-200k",
    "script" => "lstm/model-1_layer-variable.lua",
  },
}

lstm_figures = lstm_variations.keys.collect{|k| "lstm/model-#{k}.pdf"}

lstm_variations.each do |k,info|
  training_outputs = ["lstm/trained_model-#{k}.t7", "lstm/grid_predictions-#{k}.csv"]
  training_outputs.each do |f|
    file f => ["lstm/model-#{k}.sh", info['script'], "toy/#{info['data']}.t7"] do
      Rake::Task["lstm:#{k}:train"].invoke
    end
  end

  file "lstm/model-#{k}.pdf" => ["lstm/grid_predictions-#{k}.csv", "toy/plot_predictions.R"] do
    Dir.chdir "lstm" do
      pred_file = "grid_predictions-#{k}.csv"
      sh "R --vanilla --args #{pred_file} model-#{k}.pdf < ../toy/plot_predictions.R"
    end
    Rake::Task['lstm:png'].invoke
  end
end

namespace :lstm do
  lstm_variations.each do |k,info|
    namespace k do
      desc "Train the model"
      task :train do
        Dir.chdir "lstm" do
          sh "./model-#{k}.sh"
        end
      end

      desc "Visualize how well it did"
      task :visualize => "lstm/model-#{k}.pdf"
    end
  end

  desc "Generate png figures from PDFs"
  task :png do
    Dir.chdir 'lstm' do
      sh "../scripts/png_figures.sh"
    end
  end
end

task :lstm => lstm_figures + ['lstm:png']

task :default => ['toy'] + simulated_dataset_outputs + trained_models + ['mlp', 'rnn']
